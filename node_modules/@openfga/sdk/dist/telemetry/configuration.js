"use strict";
/**
 * JavaScript and Node.js SDK for OpenFGA
 *
 * API version: 1.x
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://openfga.dev/community
 * License: [Apache-2.0](https://github.com/openfga/js-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryConfiguration = void 0;
const errors_1 = require("../errors");
const attributes_1 = require("./attributes");
const metrics_1 = require("./metrics");
/**
 * Manages the overall telemetry configuration, including default and valid attributes.
 *
 * @class TelemetryConfiguration
 * @implements {TelemetryConfig}
 */
class TelemetryConfiguration {
    /**
     * Creates an instance of TelemetryConfiguration.
     *
     * @param {Partial<Record<TelemetryMetric, TelemetryMetricConfig>>} [metrics] - A record mapping telemetry metrics to their configurations.
     */
    constructor(metrics) {
        this.metrics = metrics;
        this.recorder = new metrics_1.MetricRecorder();
        if (!metrics) {
            this.metrics = {
                [metrics_1.TelemetryMetric.CounterCredentialsRequest]: { attributes: TelemetryConfiguration.defaultAttributes },
                [metrics_1.TelemetryMetric.HistogramRequestDuration]: { attributes: TelemetryConfiguration.defaultAttributes },
                [metrics_1.TelemetryMetric.HistogramQueryDuration]: { attributes: TelemetryConfiguration.defaultAttributes },
            };
        }
        else {
            this.metrics = {
                [metrics_1.TelemetryMetric.CounterCredentialsRequest]: metrics[metrics_1.TelemetryMetric.CounterCredentialsRequest] || undefined,
                [metrics_1.TelemetryMetric.HistogramRequestDuration]: metrics[metrics_1.TelemetryMetric.HistogramRequestDuration] || undefined,
                [metrics_1.TelemetryMetric.HistogramQueryDuration]: metrics[metrics_1.TelemetryMetric.HistogramQueryDuration] || undefined,
            };
        }
    }
    /**
     * Validates that the configured metrics use only valid attributes.
     *
     * @throws {FgaValidationError} Throws an error if any attribute in the metric configurations is invalid.
     */
    ensureValid() {
        const validAttrs = TelemetryConfiguration.validAttributes;
        const counterConfigAttrs = this.metrics?.counterCredentialsRequest?.attributes || new Set();
        counterConfigAttrs.forEach(counterConfigAttr => {
            if (!validAttrs.has(counterConfigAttr)) {
                throw new errors_1.FgaValidationError(`Configuration.telemetry.metrics.counterCredentialsRequest attribute '${counterConfigAttr}' is not a valid attribute`);
            }
        });
        const histogramRequestDurationConfigAttrs = this.metrics?.histogramRequestDuration?.attributes || new Set();
        histogramRequestDurationConfigAttrs.forEach(histogramRequestDurationAttr => {
            if (!validAttrs.has(histogramRequestDurationAttr)) {
                throw new errors_1.FgaValidationError(`Configuration.telemetry.metrics.histogramRequestDuration attribute '${histogramRequestDurationAttr}' is not a valid attribute`);
            }
        });
        const histogramQueryDurationConfigAttrs = this.metrics?.histogramQueryDuration?.attributes || new Set();
        histogramQueryDurationConfigAttrs.forEach(histogramQueryDurationConfigAttr => {
            if (!validAttrs.has(histogramQueryDurationConfigAttr)) {
                throw new errors_1.FgaValidationError(`Configuration.telemetry.metrics.histogramQueryDuration attribute '${histogramQueryDurationConfigAttr}' is not a valid attribute`);
            }
        });
    }
}
exports.TelemetryConfiguration = TelemetryConfiguration;
/**
 * Default attributes for telemetry metrics.
 *
 * @static
 * @readonly
 * @type {Set<TelemetryAttribute>}
 */
TelemetryConfiguration.defaultAttributes = new Set([
    attributes_1.TelemetryAttribute.HttpHost,
    attributes_1.TelemetryAttribute.HttpResponseStatusCode,
    attributes_1.TelemetryAttribute.UserAgentOriginal,
    attributes_1.TelemetryAttribute.FgaClientRequestMethod,
    attributes_1.TelemetryAttribute.FgaClientRequestClientId,
    attributes_1.TelemetryAttribute.FgaClientRequestStoreId,
    attributes_1.TelemetryAttribute.FgaClientRequestModelId,
    attributes_1.TelemetryAttribute.HttpRequestResendCount,
    attributes_1.TelemetryAttribute.FgaClientResponseModelId,
    // These metrics are not included by default because they are usually less useful
    // TelemetryAttribute.UrlScheme,
    // TelemetryAttribute.HttpRequestMethod,
    // TelemetryAttribute.UrlFull,
    // TelemetryAttribute.HttpClientRequestDuration,
    // TelemetryAttribute.HttpServerRequestDuration,
    // This not included by default as it has a very high cardinality which could increase costs for users
    // TelemetryAttribute.FgaClientUser,
    // TelemetryAttribute.FgaClientRequestBatchCheckSize
]);
/**
 * Valid attributes that can be used in telemetry metrics.
 *
 * @static
 * @readonly
 * @type {Set<TelemetryAttribute>}
 */
TelemetryConfiguration.validAttributes = new Set([
    attributes_1.TelemetryAttribute.HttpHost,
    attributes_1.TelemetryAttribute.HttpResponseStatusCode,
    attributes_1.TelemetryAttribute.UserAgentOriginal,
    attributes_1.TelemetryAttribute.FgaClientRequestMethod,
    attributes_1.TelemetryAttribute.FgaClientRequestClientId,
    attributes_1.TelemetryAttribute.FgaClientRequestStoreId,
    attributes_1.TelemetryAttribute.FgaClientRequestModelId,
    attributes_1.TelemetryAttribute.HttpRequestResendCount,
    attributes_1.TelemetryAttribute.FgaClientResponseModelId,
    attributes_1.TelemetryAttribute.UrlScheme,
    attributes_1.TelemetryAttribute.HttpRequestMethod,
    attributes_1.TelemetryAttribute.UrlFull,
    attributes_1.TelemetryAttribute.HttpClientRequestDuration,
    attributes_1.TelemetryAttribute.HttpServerRequestDuration,
    attributes_1.TelemetryAttribute.FgaClientUser,
    attributes_1.TelemetryAttribute.FgaClientRequestBatchCheckSize,
]);
